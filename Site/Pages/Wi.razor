@page "/Wi"
@using Site.Data
@using Site.Data.Model
@inject WorkitemService workitemservice
@inject NavigationManager NavigationManager

<PageTitle>Workitem</PageTitle>

<EditForm Model="@workitem" OnValidSubmit="@CreateWorkitem">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <p>
    <label>
      Category:
      <InputNumber id="Category" class="form-control" @bind-Value="workitem.Category" />
    </label>
  </p>
  <p>
    <label>
      Title:
      <InputText id="Title" class="form-control" @bind-Value="workitem.Title" />
    </label>
  </p>
  <p>
    <label>
      Description:
      <InputTextArea id="Description" class="form-control" @bind-Value="workitem.Description" />
    </label>
  </p>
  <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<h1>Workitems</h1>
<div class="row">
	<div class="col-md-4">
    <WorkitemTable Category="All" workitems="@workitems"></WorkitemTable>
  </div>
	<div class="col-md-4">
    <WorkitemTable Category="Cat1" workitems="@workitems2"></WorkitemTable>
  </div>
</div>

@code {

    private List<Workitem>? workitems;
    private List<Workitem>? workitems2;
    private Workitem workitem = new();

    protected override async Task OnInitializedAsync()
    {
        workitems = await Task.Run(() => workitemservice.GetAllWorkitems());
        workitems2 = await Task.Run(() => workitemservice.GetWorkitems(1));
    }

    protected async Task CreateWorkitem() {
        workitem.Creation = DateTime.UtcNow;
        workitem.LastChange = DateTime.UtcNow;
        await workitemservice.InsertWorkitem(workitem);
        workitem = new();

        workitems = await Task.Run(() => workitemservice.GetAllWorkitems());
        await OnInitializedAsync();
        StateHasChanged();
  }
}
